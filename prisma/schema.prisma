generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String            @id @default(cuid())
  email                String            @unique
  password             String
  firstName            String
  lastName             String
  phone                String?
  dateOfBirth          DateTime?
  address              String?
  city                 String?
  state                String?
  zipCode              String?
  country              String?
  status               UserStatus        @default(ACTIVE)
  licenseNumber        String?
  medicalClass         String?
  totalFlightHours     Float             @default(0)
  instructorRating     String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  lastLoginAt          DateTime?
  createdById          String?
  personalNumber       String?
  airfields            Airfield[]
  baseManagements      BaseManagement[]  @relation("BaseManager")
  fleetManagements     FleetManagement[] @relation("FleetPilot")
  createdFlightLogs    FlightLog[]       @relation("FlightLogCreatedBy")
  instructorFlightLogs FlightLog[]       @relation("FlightLogInstructor")
  pilotFlightLogs      FlightLog[]       @relation("FlightLogPilot")
  operationalAreas     OperationalArea[]
  sessions             Session[]
  assignedRoles        UserRole[]        @relation("UserAssignedRole")
  userRoles            UserRole[]
  createdBy            User?             @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers         User[]            @relation("UserCreatedBy")

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id             String   @id @default(cuid())
  userId         String
  roleId         String
  assignedAt     DateTime @default(now())
  assignedBy     String?
  assignedByUser User?    @relation("UserAssignedRole", fields: [assignedBy], references: [id])
  role           Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Airfield {
  id                  String          @id @default(cuid())
  name                String
  code                String          @unique
  status              AirfieldStatus  @default(ACTIVE)
  city                String?
  state               String?
  country             String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  createdById         String?
  isBase              Boolean         @default(false)
  continent           String?
  latitude            Float?
  longitude           Float?
  elevation           Int?
  email               String?
  phone               String?
  runwayLength        Int?
  runwaySurface       String?
  website             String?
  type                String
  createdBy           User?           @relation(fields: [createdById], references: [id])
  baseManagement      BaseManagement?
  arrivalFlightLogs   FlightLog[]     @relation("FlightLogArrival")
  departureFlightLogs FlightLog[]     @relation("FlightLogDeparture")

  @@map("airfields")
}

model BaseManagement {
  id               String   @id @default(cuid())
  airfieldId       String   @unique
  baseManagerId    String?
  additionalInfo   String?
  facilities       String[]
  operatingHours   String?
  emergencyContact String?
  notes            String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  airfield         Airfield @relation(fields: [airfieldId], references: [id], onDelete: Cascade)
  baseManager      User?    @relation("BaseManager", fields: [baseManagerId], references: [id])

  @@map("base_management")
}

model OperationalArea {
  id          String   @id @default(cuid())
  continent   String
  countries   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  createdBy   User?    @relation(fields: [createdById], references: [id])

  @@unique([continent, countries, createdById])
  @@map("operational_areas")
}

model AirfieldBackup {
  id            String         @id @default(cuid())
  name          String
  code          String
  type          String
  status        AirfieldStatus @default(ACTIVE)
  latitude      Float?
  longitude     Float?
  elevation     Int?
  city          String?
  state         String?
  country       String?
  continent     String?
  runwayLength  Int?
  runwaySurface String?
  phone         String?
  email         String?
  website       String?
  isBase        Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  createdById   String?
  backupDate    DateTime       @default(now())

  @@map("airfield_backups")
}

model FleetManagement {
  id                  String            @id @default(cuid())
  aircraftId          String            @unique
  assignedPilotId     String?
  maintenanceSchedule String?
  operationalHours    String?
  fuelType            String?
  fuelCapacity        Float?
  range               Float?
  maxPassengers       Int?
  maxPayload          Float?
  specialEquipment    String[]
  operationalNotes    String?
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  aircraft            ICAOReferenceType @relation(fields: [aircraftId], references: [id], onDelete: Cascade)
  assignedPilot       User?             @relation("FleetPilot", fields: [assignedPilotId], references: [id])

  @@map("fleet_management")
}

model ICAOReferenceType {
  id              String           @id @default(cuid())
  manufacturer    String
  model           String
  typeDesignator  String
  description     String?
  engineType      String
  engineCount     Int
  wtc             String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  aircraft        Aircraft[]
  fleetManagement FleetManagement?

  @@unique([manufacturer, model, typeDesignator])
  @@map("icao_reference_type")
}

model Aircraft {
  id                  String            @id @default(cuid())
  icaoReferenceTypeId String
  callSign            String            @unique
  serialNumber        String            @unique
  yearOfManufacture   Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  imagePath           String?
  status              AircraftStatus    @default(ACTIVE)
  icaoReferenceType   ICAOReferenceType @relation(fields: [icaoReferenceTypeId], references: [id])
  flightLogs          FlightLog[]

  @@map("aircraft")
}

model FlightLog {
  id                  String     @id @default(cuid())
  aircraftId          String
  pilotId             String
  instructorId        String?
  date                DateTime
  departureTime       String
  arrivalTime         String
  departureAirfieldId String
  arrivalAirfieldId   String
  flightType          FlightType
  purpose             String?
  remarks             String?
  totalHours          Float
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  createdById         String
  actualInstrument    Float      @default(0)
  conditions          String?
  crossCountry        Float      @default(0)
  dayLandings         Int        @default(0)
  dualGiven           Float      @default(0)
  dualReceived        Float      @default(0)
  instrument          Float      @default(0)
  night               Float      @default(0)
  nightLandings       Int        @default(0)
  pilotInCommand      Float      @default(0)
  route               String?
  secondInCommand     Float      @default(0)
  simulatedInstrument Float      @default(0)
  solo                Float      @default(0)
  // Hobbs readings
  departureHobbs      Float?
  arrivalHobbs        Float?
  // Fuel and oil information
  oilAdded            Int?       @default(0)
  fuelAdded           Int?       @default(0)
  aircraft            Aircraft   @relation(fields: [aircraftId], references: [id], onDelete: Cascade)
  arrivalAirfield     Airfield   @relation("FlightLogArrival", fields: [arrivalAirfieldId], references: [id])
  createdBy           User       @relation("FlightLogCreatedBy", fields: [createdById], references: [id])
  departureAirfield   Airfield   @relation("FlightLogDeparture", fields: [departureAirfieldId], references: [id])
  instructor          User?      @relation("FlightLogInstructor", fields: [instructorId], references: [id])
  pilot               User       @relation("FlightLogPilot", fields: [pilotId], references: [id])

  @@map("flight_logs")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

enum AirfieldStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  CLOSED
}

enum AirfieldType {
  AIRPORT
  HELIPORT
  SEAPLANE_BASE
  BALLOON_PORT
  GLIDER_PORT
  ULTRALIGHT_FIELD
}

enum AircraftStatus {
  ACTIVE
  MAINTENANCE
  OUT_OF_SERVICE
  RETIRED
  REFERENCE
}

enum EngineType {
  PISTON
  TURBOFAN
  TURBOPROP
  TURBOSHAFT
  ELECTRIC
  HYBRID
}

enum WakeTurbulenceCategory {
  LIGHT
  MEDIUM
  HEAVY
  SUPER
}

enum FlightType {
  INVOICED
  SCHOOL
  FERRY
  CHARTER
  DEMO
  PROMO
}
